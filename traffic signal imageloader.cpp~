#include <assert.h>
#include <fstream>
#include "traffic signal imageloader.h"
using namespace std;

Image::Image(char* ps, int w, int h) : pixels(ps), width(w), height(h) { }

Image::~Image()
 {
	delete[] pixels;
}

int toInt(const char* bytes)     
{   
	return (int)(((char)bytes[3] << 24) |(( char)bytes[2] << 16) |(( char)bytes[1] << 8) |( char)bytes[0]);
	}	
int readInt(ifstream &input) {
		char buffer[4];
		input.read(buffer, 4);
		return toInt(buffer);
	}

template<class T>
	class auto_array
{
private:
			T* array;
		int isReleased;
public:
			explicit auto_array(T* array_ = NULL) :
				array(array_), isReleased(false) {	}	
~auto_array() 
				{
				if (!isReleased && array != NULL) 
				{
					delete[] array;
				}
			}
			
T* get() const 
		{
			return array;
			}
			
	
T* release() 
			{
			isReleased = true;
				return array;
			}
	
		T* operator+(int i)
		{
				return array + i;
			}
			
			T &operator[](int i) 
			{
				return array[i];
			}
	};


Image* loadBMP(const char* filename) {
	ifstream input;
	input.open(filename, ifstream::binary);
	assert(!input.fail() || !"Could not find file");
	char buffer[2];
	input.read(buffer, 2);
	assert(buffer[0] == 'B' && buffer[1] == 'M' || !"Not a bitmap file");
	input.ignore(8);
	int dataOffset = readInt(input);
	
	//Read the header
	int headerSize = readInt(input);
	int width;
	int height;
	switch(headerSize) {
		case 40:
			//V3
			width = readInt(input);
			height = readInt(input);
			input.ignore(2);
			assert(readInt(input) == 24 || !"Image is not 24 bits per pixel");
			assert(readInt(input) == 0 || !"Image is compressed");
			break;
		default:
			assert(!"Unknown bitmap format");
	}
	
	//Read the data
	int bytesPerRow = ((width * 3 + 3) / 4) * 4 - (width * 3 % 4);
	int size = bytesPerRow * height;
	auto_array<char> pixels(new char[size]);
	input.seekg(dataOffset, ios_base::beg);
	input.read(pixels.get(), size);
	
	//Get the data into the right format
	auto_array<char> pixels2(new char[width * height * 3]);
	for(int y = 0; y < height; y++)
	{
		for(int x = 0; x < width; x++) 
		{
			for(int c = 0; c < 3; c++)
			{
				pixels2[3 * (width * y + x) + c] =	pixels[bytesPerRow * y + 3 * x + (2 - c)];
			}
		}
	}
	
	input.close();
	return new Image(pixels2.release(), width, height);
}




